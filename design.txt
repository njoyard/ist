Goal => Updateable node tree

2 alternatives

1. Auto-update
	- Using Object.observe ? Need fallback with possibly slow proxy
	- Using a built-in object set (an UpdateArray, UpdateObject, etc) ? possibly
	  clumsy to use and very restrictive
	- Need a way to prevent updating to avoid transitional states to be
	  displayed
	- It's difficult to extract properties to observe from complex expressions,
	  unless introducing a new "updateable expression" syntax, with filters, etc;
	  kind of sad because expressions are already powerful. Or we could use a
	  proxy on rendering context to spy on which properties are accessed during
	  render (which is kind of heavy for big context objects). And would maybe
	  not work considering we access all properties when creating the evaluate()
	  function....
	  
2. Call an update method
 	- easier as complex expressions can just be re-rendered
	- Without anything => keep ref to the object passed to render()
	- With an object => replace the object used
	- What about templates rendered multiple times ?
		- Put a reference to [template, context] in the root node ? useless if
		  document fragment
		- Keep the last render() only ? And add a way to "save" the last render()
		  to enable new render()s with separate updates
	- Think about how to update only part of a template (maybe using partials ?)
	- Should 


- Need to keep a ref on the rendering object. Should not be linked to nodes !
- Maybe the root node of templates should not be a ContainerNode. => have a
  TemplateNode to host new methods.  Make findPartial return a TemplateNode.
- Find a way to avoid re-rendering everything ?  Notably keeping node state if
  it changed after being rendered...
  
